#################################################################
## Hussar
##
## revision v0.1.0
## last edited 01/02/2020
##
#################################################################
## Edit in Iro editor: https://eeyo.io/iro/
################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
##
################################################################

name                   = hussar
file_extensions []     = hss;

################################################################
## Constants
################################################################

__MY_CONSTANT \= (\b[a-zA-Z][a-zA-Z0-9]*)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color     = cyan
   textmate_scope        = keyword.control
   pygments_scope        = Keyword.Reserved
}

.symbol : style {
   color = purple
   textmate_scope = variable
   pygments_scope = Name.Variable
}

.constant : style {
   color = green
   textmate_scope = constant.language
   pygments_scope = Literal
}

.numeric : style {
   color                 = gold
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = red_2
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.text : style {
   color                 = yellow
   textmate_scope        = string
   pygments_scope        = String
}

.illegal : style {
   color                 = white
   background_color      = red
   textmate_scope        = invalid.illegal
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }
   
   : pattern {
      regex          \= (while|if|else|return|let|mut|fn|var)
      styles []       = .keyword;
   }
   
   : pattern {
      regex          \= (true|false)
      styles []       = .constant;
   }
   
   : pattern {
      regex          \= $${__MY_CONSTANT}
      styles []       = .symbol;
   }
   
   : include "numeric" ;
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : pattern {
      regex          \= (;)
      styles []       = .punctuation;
   }
   
   : pattern {
      regex          \= (\+|-|\*|/)
      styles []       = .punctuation;
   }
   
   : pattern {
      regex          \= (=)
      styles []       = .punctuation;
   }
   
   : inline_push {
      regex          \= (\")
      styles []       = .punctuation;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .punctuation;
      }
   }
   
   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "numeric" ;
      : pattern {
         regex       \= (,)
         styles []    = .punctuation;
      }
   }
   
   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
   
}

#################################################
## End of Contexts
#################################################

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}
   
}